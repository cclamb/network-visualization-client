
<style>

  .node {
    opacity: 0.5;
  }

  .node:hover {
    opacity: 1;
  }

  .link {
    stroke: #999;
    stroke-opacity: 0.3;
  }

</style>

<svg id="display" style="border: 1px solid black"/>

<script>

var width = 960,
	height = 600,
	svg = d3.select("#display")
    .attr("width", width)
    .attr("height", height);

function name(d) { return d.name; }
function group(d) { return d.group; }

var color = d3.scale.category10();
function colorByGroup(d) { return color(group(d)); }
var node, link;

var voronoi = d3.geom.voronoi()
  .x(function(d) { return d.x; })
  .y(function(d) { return d.y; })
  .clipExtent([[-10, -10], [width+10, height+10]]);

function recenterVoronoi(nodes) {
  var shapes = [];
  voronoi(nodes).forEach(function(d) {
    if ( !d.length ) return;
    var n = [];
    d.forEach(function(c){
        n.push([ c[0] - d.point.x, c[1] - d.point.y ]);
    });
    n.point = d.point;
    shapes.push(n);
  });
  return shapes;
}

var force = d3.layout.force()
  .charge(-2000)
  .friction(0.3)
  .linkDistance(50)
  .size([width, height]);

force.on('tick', function() {
  node.attr('transform', function(d) { return 'translate('+d.x+','+d.y+')'; })
    .attr('clip-path', function(d) { return 'url(#clip-'+d.index+')'; });

  link.attr('x1', function(d) { return d.source.x; })
    .attr('y1', function(d) { return d.source.y; })
    .attr('x2', function(d) { return d.target.x; })
    .attr('y2', function(d) { return d.target.y; });

  var clip = svg.selectAll('.clip')
    .data( recenterVoronoi(node.data()), function(d) { return d.point.index; } );

  clip.enter().append('clipPath')
    .attr('id', function(d) { return 'clip-'+d.point.index; })
    .attr('class', 'clip');
  clip.exit().remove()

  clip.selectAll('path').remove();
  clip.append('path')
    .attr('d', function(d) { return 'M'+d.join(',')+'Z'; });
});

d3.json('http://127.0.0.1:4567/dmz', function(err, data) {
  //debugger;
  //var node_map = {}, link_map = {}, idx = 0;
  var nodes = [], links = [], map = {}, idx = 0;
  // data.nodes.forEach(function(d, i) {
  //   d.id = i;
  // });
  data.forEach(function(d) {
    var src_id = d.protocol + '://' + d.src_addr + ':' + d.src_port, 
      dst_id = d.protocol + '://' + d.dst_addr + ':' + d.dst_port,
      src_idx = map[src_id],
      dst_idx = map[dst_id];

    if (src_idx === undefined) {
      nodes.push({ id: src_id, weight: 1 });
      src_idx = idx;
      map[src_id] == idx++;
    }
    if (dst_idx === undefined) {
      nodes.push({ id: dst_id, weight: 1 });
      dst_idx = idx;
      map[dst_id] == idx++;
    }

    links.push({
      source: src_idx,
      target: dst_idx,
      value: 1
    });

    idx += 2;
  });

  debugger;

  // var nodes = Object.keys(node_map).map(function (key) {
  //   return node_map[key];
  // });

  // var links = Object.keys(link_map).map(function (key) {
  //   return link_map[key];
  // });

  //debugger;

  // link = svg.selectAll('.link')
  //   .data( data.links )
  // .enter().append('line')
  //   .attr('class', 'link')
  //   .style("stroke-width", function(d) { return Math.sqrt(d.value); });
  link = svg.selectAll('.link')
    .data( links )
  .enter().append('line')
    .attr('class', 'link')
    .style('stroke-width', function(d) { return Math.sqrt(d.value); });

  // node = svg.selectAll('.node')
  //   .data( data.nodes )
  // .enter().append('g')
  //   .attr('title', name)
  //   .attr('class', 'node')
  //   .call( force.drag );
  node = svg.selectAll('.node')
    .data( nodes )
  .enter().append('g')
    .attr('title', name)
    .attr('class', 'node')
    .call( force.drag );

  node.append('circle')
    .attr('r', 10)
    .attr('fill', colorByGroup)
    .attr('fill-opacity', 0.5);

  node.append('circle')
    .attr('r', 4)
    .attr('stroke', 'black');

  // force.nodes( data.nodes )
  //   .links( data.links )
  //   .start();
  force.nodes( nodes )
    .links( links )
    .start();
});

</script>
